/// FOURJS_START_COPYRIGHT(D,2015)
/// Property of Four Js*
/// (c) Copyright Four Js 2015, 2019. All Rights Reserved.
/// * Trademark of Four Js Development Tools Europe Ltd
///   in the United States and elsewhere
/// 
/// This file can be modified by licensees according to the
/// product manual.
/// FOURJS_END_COPYRIGHT

// jshint ignore:start

"use strict";
modulum("AuiProtocolParser",

  function(context) {
    /**
     *  @namespace gbc.AuiProtocolParser
     */
    context.AuiProtocolParser = (function() {
      "use strict";

      /*
       * Generated by PEG.js 0.9.0.
       *
       * http://pegjs.org/
       */

      function peg$subclass(child, parent) {
        function ctor() {
          this.constructor = child;
        }

        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
      }

      function peg$SyntaxError(message, expected, found, location) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.location = location;
        this.name = "SyntaxError";

        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, peg$SyntaxError);
        }
      }

      peg$subclass(peg$SyntaxError, Error);

      function peg$parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},
          parser = this,

          peg$FAILED = {},

          peg$startRuleFunctions = {
            start: peg$parsestart
          },
          peg$startRuleFunction = peg$parsestart,

          peg$c0 = function(cnx) {
            return [cnx];
          },
          peg$c1 = function(attrs) {
            return {
              type: "meta",
              verb: "Connection",
              attributes: attrs
            };
          },
          peg$c2 = {
            type: "other",
            description: "OM Order"
          },
          peg$c3 = function(idGroup, list) {
            return {
              type: "om",
              id: idGroup,
              operations: list,
              header: null
            };
          },
          peg$c4 = function(bytes, idGroup, list) {
            return {
              type: "om",
              id: idGroup,
              operations: list,
              header: bytes
            };
          },
          peg$c5 = {
            type: "any",
            description: "any character"
          },
          peg$c6 = function(cmd) {
            return cmd;
          },
          peg$c7 = {
            type: "other",
            description: "OM command"
          },
          peg$c8 = {
            type: "other",
            description: "Add node"
          },
          peg$c9 = function(parentId, n) {
            return {
              type: "add",
              parent: parentId,
              node: n
            };
          },
          peg$c10 = {
            type: "other",
            description: "Update node"
          },
          peg$c11 = function(id, attrs) {
            return {
              type: "update",
              id: id,
              attributes: attrs
            };
          },
          peg$c12 = {
            type: "other",
            description: "RemoveNode"
          },
          peg$c13 = function(id) {
            return {
              type: "remove",
              id: id
            };
          },
          peg$c14 = function(attrs) {
            var result = {},
              len = attrs.length;
            for (var i = 0; i < len; i++) {
              result[attrs[i].name] = attrs[i].value;
            }
            return result;
          },
          peg$c15 = "value",
          peg$c16 = {
            type: "literal",
            value: "value",
            description: "\"value\""
          },
          peg$c17 = function(chars) {
            return {
              name: "value",
              value: chars.join("")
            };
          },
          peg$c18 = "valueChecked",
          peg$c19 = {
            type: "literal",
            value: "valueChecked",
            description: "\"valueChecked\""
          },
          peg$c20 = function(chars) {
            return {
              name: "valueChecked",
              value: chars.join("")
            };
          },
          peg$c21 = "valueUnchecked",
          peg$c22 = {
            type: "literal",
            value: "valueUnchecked",
            description: "\"valueUnchecked\""
          },
          peg$c23 = function(chars) {
            return {
              name: "valueUnchecked",
              value: chars.join("")
            };
          },
          peg$c24 = "name",
          peg$c25 = {
            type: "literal",
            value: "name",
            description: "\"name\""
          },
          peg$c26 = function(chars) {
            return {
              name: "name",
              value: chars.join("")
            };
          },
          peg$c27 = "comment",
          peg$c28 = {
            type: "literal",
            value: "comment",
            description: "\"comment\""
          },
          peg$c29 = function(chars) {
            return {
              name: "comment",
              value: chars.join("")
            };
          },
          peg$c30 = "text",
          peg$c31 = {
            type: "literal",
            value: "text",
            description: "\"text\""
          },
          peg$c32 = function(chars) {
            return {
              name: "text",
              value: chars.join("")
            };
          },
          peg$c33 = "style",
          peg$c34 = {
            type: "literal",
            value: "style",
            description: "\"style\""
          },
          peg$c35 = function(chars) {
            return {
              name: "style",
              value: chars.join("")
            };
          },
          peg$c36 = "aggregateValue",
          peg$c37 = {
            type: "literal",
            value: "aggregateValue",
            description: "\"aggregateValue\""
          },
          peg$c38 = function(chars) {
            return {
              name: "aggregateValue",
              value: chars.join("")
            };
          },
          peg$c39 = "aggregateText",
          peg$c40 = {
            type: "literal",
            value: "aggregateText",
            description: "\"aggregateText\""
          },
          peg$c41 = function(chars) {
            return {
              name: "aggregateText",
              value: chars.join("")
            };
          },
          peg$c42 = function(name, value) {
            return {
              name: name,
              value: value
            };
          },
          peg$c43 = function(n) {
            return n;
          },
          peg$c44 = function(nodeType, nodeId, attrs, children) {
            return {
              id: nodeId,
              type: nodeType,
              attributes: attrs,
              children: children
            };
          },
          peg$c45 = {
            type: "other",
            description: "needed space"
          },
          peg$c46 = /^[ \t\r\n]/,
          peg$c47 = {
            type: "class",
            value: "[ \\t\\r\\n]",
            description: "[ \\t\\r\\n]"
          },
          peg$c48 = {
            type: "other",
            description: "optional space"
          },
          peg$c49 = "meta",
          peg$c50 = {
            type: "literal",
            value: "meta",
            description: "\"meta\""
          },
          peg$c51 = "Connection",
          peg$c52 = {
            type: "literal",
            value: "Connection",
            description: "\"Connection\""
          },
          peg$c53 = "om",
          peg$c54 = {
            type: "literal",
            value: "om",
            description: "\"om\""
          },
          peg$c55 = "an",
          peg$c56 = {
            type: "literal",
            value: "an",
            description: "\"an\""
          },
          peg$c57 = "un",
          peg$c58 = {
            type: "literal",
            value: "un",
            description: "\"un\""
          },
          peg$c59 = "rn",
          peg$c60 = {
            type: "literal",
            value: "rn",
            description: "\"rn\""
          },
          peg$c61 = "{",
          peg$c62 = {
            type: "literal",
            value: "{",
            description: "\"{\""
          },
          peg$c63 = "}",
          peg$c64 = {
            type: "literal",
            value: "}",
            description: "\"}\""
          },
          peg$c65 = /^[0-9]/,
          peg$c66 = {
            type: "class",
            value: "[0-9]",
            description: "[0-9]"
          },
          peg$c67 = function(digits) {
            return parseInt(digits.join(""), 10);
          },
          peg$c68 = function(num) {
            var res = parseFloat(num);
            if (Number.isNaN(res)) {
              return num;
            } else {
              return res;
            }
          },
          peg$c69 = function(integer) {
            if (integer.length > 16) {
              return integer;
            } else {
              return parseInt(integer, 10);
            }
          },
          peg$c70 = function(chars) {
            return chars.join("");
          },
          peg$c71 = "0",
          peg$c72 = {
            type: "literal",
            value: "0",
            description: "\"0\""
          },
          peg$c73 = function() {
            return 0;
          },
          peg$c74 = "-",
          peg$c75 = {
            type: "literal",
            value: "-",
            description: "\"-\""
          },
          peg$c76 = /^[1-9]/,
          peg$c77 = {
            type: "class",
            value: "[1-9]",
            description: "[1-9]"
          },
          peg$c78 = function(sign, firstdigit, digits) {
            return (sign ? "-" : "") + firstdigit + digits.join("");
          },
          peg$c79 = ".",
          peg$c80 = {
            type: "literal",
            value: ".",
            description: "\".\""
          },
          peg$c81 = function(sign, digits, decimals) {
            return (sign ? "-" : "") + digits.join("") + "." + decimals.join("");
          },
          peg$c82 = function() {
            return "";
          },
          peg$c83 = "\"",
          peg$c84 = {
            type: "literal",
            value: "\"",
            description: "\"\\\"\""
          },
          peg$c85 = "\\",
          peg$c86 = {
            type: "literal",
            value: "\\",
            description: "\"\\\\\""
          },
          peg$c87 = "/",
          peg$c88 = {
            type: "literal",
            value: "/",
            description: "\"/\""
          },
          peg$c89 = "b",
          peg$c90 = {
            type: "literal",
            value: "b",
            description: "\"b\""
          },
          peg$c91 = function() {
            return "\b";
          },
          peg$c92 = "f",
          peg$c93 = {
            type: "literal",
            value: "f",
            description: "\"f\""
          },
          peg$c94 = function() {
            return "\f";
          },
          peg$c95 = "n",
          peg$c96 = {
            type: "literal",
            value: "n",
            description: "\"n\""
          },
          peg$c97 = function() {
            return "\n";
          },
          peg$c98 = "u",
          peg$c99 = {
            type: "literal",
            value: "u",
            description: "\"u\""
          },
          peg$c100 = function(digits) {
            return String.fromCharCode(parseInt(digits, 16));
          },
          peg$c101 = function(sequence) {
            return sequence;
          },
          peg$c102 = /^[\t\r -!#-[\]-\uFFFF]/,
          peg$c103 = {
            type: "class",
            value: "[\\t\\r\\x20-\\x21\\x23-\\x5B\\x5D-\\uFFFF]",
            description: "[\\t\\r\\x20-\\x21\\x23-\\x5B\\x5D-\\uFFFF]"
          },
          peg$c104 = /^[\x01-\x08\x0B-\f\x0E-\x1F]/,
          peg$c105 = {
            type: "class",
            value: "[\\x01-\\x08\\x0B-\\x0C\\x0E-\\x1F]",
            description: "[\\x01-\\x08\\x0B-\\x0C\\x0E-\\x1F]"
          },
          peg$c106 = /^[0-9a-fA-F]/,
          peg$c107 = {
            type: "class",
            value: "[0-9a-fA-F]",
            description: "[0-9a-fA-F]"
          },
          peg$c108 = function(c) {
            return c.join("");
          },
          peg$c109 = /^[A-Za-z]/,
          peg$c110 = {
            type: "class",
            value: "[A-Za-z]",
            description: "[A-Za-z]"
          },

          peg$currPos = 0,
          peg$savedPos = 0,
          peg$posDetailsCache = [{
            line: 1,
            column: 1,
            seenCR: false
          }],
          peg$maxFailPos = 0,
          peg$maxFailExpected = [],
          peg$silentFails = 0,

          peg$result;

        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
          }

          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function text() {
          return input.substring(peg$savedPos, peg$currPos);
        }

        function location() {
          return peg$computeLocation(peg$savedPos, peg$currPos);
        }

        function expected(description) {
          throw peg$buildException(
            null, [{
              type: "other",
              description: description
            }],
            input.substring(peg$savedPos, peg$currPos),
            peg$computeLocation(peg$savedPos, peg$currPos)
          );
        }

        function error(message) {
          throw peg$buildException(
            message,
            null,
            input.substring(peg$savedPos, peg$currPos),
            peg$computeLocation(peg$savedPos, peg$currPos)
          );
        }

        function peg$computePosDetails(pos) {
          var details = peg$posDetailsCache[pos],
            p, ch;

          if (details) {
            return details;
          } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
              p--;
            }

            details = peg$posDetailsCache[p];
            details = {
              line: details.line,
              column: details.column,
              seenCR: details.seenCR
            };

            while (p < pos) {
              ch = input.charAt(p);
              if (ch === "\n") {
                if (!details.seenCR) {
                  details.line++;
                }
                details.column = 1;
                details.seenCR = false;
              } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                details.line++;
                details.column = 1;
                details.seenCR = true;
              } else {
                details.column++;
                details.seenCR = false;
              }

              p++;
            }

            peg$posDetailsCache[pos] = details;
            return details;
          }
        }

        function peg$computeLocation(startPos, endPos) {
          var startPosDetails = peg$computePosDetails(startPos),
            endPosDetails = peg$computePosDetails(endPos);

          return {
            start: {
              offset: startPos,
              line: startPosDetails.line,
              column: startPosDetails.column
            },
            end: {
              offset: endPos,
              line: endPosDetails.line,
              column: endPosDetails.column
            }
          };
        }

        function peg$fail(expected) {
          if (peg$currPos < peg$maxFailPos) {
            return;
          }

          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }

          peg$maxFailExpected.push(expected);
        }

        function peg$buildException(message, expected, found, location) {
          function cleanupExpected(expected) {
            var i = 1;

            expected.sort(function(a, b) {
              if (a.description < b.description) {
                return -1;
              } else if (a.description > b.description) {
                return 1;
              } else {
                return 0;
              }
            });

            while (i < expected.length) {
              if (expected[i - 1] === expected[i]) {
                expected.splice(i, 1);
              } else {
                i++;
              }
            }
          }

          function buildMessage(expected, found) {
            function stringEscape(s) {
              function hex(ch) {
                return ch.charCodeAt(0).toString(16).toUpperCase();
              }

              return s
                .replace(/\\/g, '\\\\')
                .replace(/"/g, '\\"')
                .replace(/\x08/g, '\\b')
                .replace(/\t/g, '\\t')
                .replace(/\n/g, '\\n')
                .replace(/\f/g, '\\f')
                .replace(/\r/g, '\\r')
                .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) {
                  return '\\x0' + hex(ch);
                })
                .replace(/[\x10-\x1F\x80-\xFF]/g, function(ch) {
                  return '\\x' + hex(ch);
                })
                .replace(/[\u0100-\u0FFF]/g, function(ch) {
                  return '\\u0' + hex(ch);
                })
                .replace(/[\u1000-\uFFFF]/g, function(ch) {
                  return '\\u' + hex(ch);
                });
            }

            var expectedDescs = new Array(expected.length),
              expectedDesc, foundDesc, i;

            for (i = 0; i < expected.length; i++) {
              expectedDescs[i] = expected[i].description;
            }

            expectedDesc = expected.length > 1 ?
              expectedDescs.slice(0, -1).join(", ") +
              " or " +
              expectedDescs[expected.length - 1] :
              expectedDescs[0];

            foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

            return "Expected " + expectedDesc + " but " + foundDesc + " found.";
          }

          if (expected !== null) {
            cleanupExpected(expected);
          }

          return new peg$SyntaxError(
            message !== null ? message : buildMessage(expected, found),
            expected,
            found,
            location
          );
        }

        function peg$parsestart() {
          var s0, s1;

          s0 = peg$currPos;
          s1 = peg$parseconnection();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$parseorders();
          }

          return s0;
        }

        function peg$parseconnection() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseMETA();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseCONNECTION();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseLBRACE();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseattributes();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parse_();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parseRBRACE();
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parse_();
                              if (s11 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c1(s8);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseorders() {
          var s0, s1;

          s0 = [];
          s1 = peg$parseorder();
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$parseorder();
          }

          return s0;
        }

        function peg$parseorder() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

          peg$silentFails++;
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseOM();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseINTEGER();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseLBRACE();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsecommandList();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parse_();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parseRBRACE();
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parse_();
                              if (s11 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c3(s4, s8);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsebytesHeader();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseOM();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse__();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseINTEGER();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseLBRACE();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parse_();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parsecommandList();
                            if (s9 !== peg$FAILED) {
                              s10 = peg$parse_();
                              if (s10 !== peg$FAILED) {
                                s11 = peg$parseRBRACE();
                                if (s11 !== peg$FAILED) {
                                  s12 = peg$parse_();
                                  if (s12 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c4(s2, s5, s9);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c2);
            }
          }

          return s0;
        }

        function peg$parsebytesHeader() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

          s0 = peg$currPos;
          if (input.length > peg$currPos) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }
          if (s1 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c5);
              }
            }
            if (s2 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c5);
                }
              }
              if (s3 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c5);
                  }
                }
                if (s4 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c5);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c5);
                      }
                    }
                    if (s6 !== peg$FAILED) {
                      if (input.length > peg$currPos) {
                        s7 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c5);
                        }
                      }
                      if (s7 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                          s8 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c5);
                          }
                        }
                        if (s8 !== peg$FAILED) {
                          if (input.length > peg$currPos) {
                            s9 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c5);
                            }
                          }
                          if (s9 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsecommandList() {
          var s0, s1;

          s0 = [];
          s1 = peg$parsecommandItem();
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$parsecommandItem();
          }

          return s0;
        }

        function peg$parsecommandItem() {
          var s0, s1, s2, s3, s4, s5, s6, s7;

          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseLBRACE();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsecommand();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseRBRACE();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c6(s4);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsecommand() {
          var s0, s1;

          peg$silentFails++;
          s0 = peg$parseaddnode();
          if (s0 === peg$FAILED) {
            s0 = peg$parseupdatenode();
            if (s0 === peg$FAILED) {
              s0 = peg$parseremovenode();
            }
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c7);
            }
          }

          return s0;
        }

        function peg$parseaddnode() {
          var s0, s1, s2, s3, s4, s5, s6, s7;

          peg$silentFails++;
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseAN();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseINTEGER();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse__();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsenode();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c9(s4, s6);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c8);
            }
          }

          return s0;
        }

        function peg$parseupdatenode() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

          peg$silentFails++;
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseUN();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseINTEGER();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseLBRACE();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseattributes();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parse_();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parseRBRACE();
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parse_();
                              if (s11 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c11(s4, s8);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c10);
            }
          }

          return s0;
        }

        function peg$parseremovenode() {
          var s0, s1, s2, s3, s4, s5;

          peg$silentFails++;
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseRN();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseINTEGER();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c13(s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c12);
            }
          }

          return s0;
        }

        function peg$parseattributes() {
          var s0, s1, s2;

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseattribute();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseattribute();
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c14(s1);
          }
          s0 = s1;

          return s0;
        }

        function peg$parseattribute() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseLBRACE();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c15) {
                  s4 = peg$c15;
                  peg$currPos += 5;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c16);
                  }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse__();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsequotation_mark();
                    if (s6 !== peg$FAILED) {
                      s7 = [];
                      s8 = peg$parseschar();
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        s8 = peg$parseschar();
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsequotation_mark();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parse_();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parseRBRACE();
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parse_();
                              if (s11 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c17(s7);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseLBRACE();
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 12) === peg$c18) {
                    s4 = peg$c18;
                    peg$currPos += 12;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c19);
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse__();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsequotation_mark();
                      if (s6 !== peg$FAILED) {
                        s7 = [];
                        s8 = peg$parseschar();
                        while (s8 !== peg$FAILED) {
                          s7.push(s8);
                          s8 = peg$parseschar();
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parsequotation_mark();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parse_();
                            if (s9 !== peg$FAILED) {
                              s10 = peg$parseRBRACE();
                              if (s10 !== peg$FAILED) {
                                s11 = peg$parse_();
                                if (s11 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c20(s7);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parse_();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseLBRACE();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();
                  if (s3 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 14) === peg$c21) {
                      s4 = peg$c21;
                      peg$currPos += 14;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c22);
                      }
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parse__();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parsequotation_mark();
                        if (s6 !== peg$FAILED) {
                          s7 = [];
                          s8 = peg$parseschar();
                          while (s8 !== peg$FAILED) {
                            s7.push(s8);
                            s8 = peg$parseschar();
                          }
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parsequotation_mark();
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parse_();
                              if (s9 !== peg$FAILED) {
                                s10 = peg$parseRBRACE();
                                if (s10 !== peg$FAILED) {
                                  s11 = peg$parse_();
                                  if (s11 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c23(s7);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parse_();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseLBRACE();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c24) {
                        s4 = peg$c24;
                        peg$currPos += 4;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c25);
                        }
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parse__();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parsequotation_mark();
                          if (s6 !== peg$FAILED) {
                            s7 = [];
                            s8 = peg$parseschar();
                            while (s8 !== peg$FAILED) {
                              s7.push(s8);
                              s8 = peg$parseschar();
                            }
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parsequotation_mark();
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parse_();
                                if (s9 !== peg$FAILED) {
                                  s10 = peg$parseRBRACE();
                                  if (s10 !== peg$FAILED) {
                                    s11 = peg$parse_();
                                    if (s11 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c26(s7);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parse_();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseLBRACE();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parse_();
                      if (s3 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c27) {
                          s4 = peg$c27;
                          peg$currPos += 7;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c28);
                          }
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parse__();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parsequotation_mark();
                            if (s6 !== peg$FAILED) {
                              s7 = [];
                              s8 = peg$parseschar();
                              while (s8 !== peg$FAILED) {
                                s7.push(s8);
                                s8 = peg$parseschar();
                              }
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parsequotation_mark();
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$parse_();
                                  if (s9 !== peg$FAILED) {
                                    s10 = peg$parseRBRACE();
                                    if (s10 !== peg$FAILED) {
                                      s11 = peg$parse_();
                                      if (s11 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c29(s7);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parse_();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseLBRACE();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        if (s3 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c30) {
                            s4 = peg$c30;
                            peg$currPos += 4;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c31);
                            }
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parse__();
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parsequotation_mark();
                              if (s6 !== peg$FAILED) {
                                s7 = [];
                                s8 = peg$parseschar();
                                while (s8 !== peg$FAILED) {
                                  s7.push(s8);
                                  s8 = peg$parseschar();
                                }
                                if (s7 !== peg$FAILED) {
                                  s8 = peg$parsequotation_mark();
                                  if (s8 !== peg$FAILED) {
                                    s9 = peg$parse_();
                                    if (s9 !== peg$FAILED) {
                                      s10 = peg$parseRBRACE();
                                      if (s10 !== peg$FAILED) {
                                        s11 = peg$parse_();
                                        if (s11 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$c32(s7);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parse_();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseLBRACE();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parse_();
                          if (s3 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c33) {
                              s4 = peg$c33;
                              peg$currPos += 5;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c34);
                              }
                            }
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parse__();
                              if (s5 !== peg$FAILED) {
                                s6 = peg$parsequotation_mark();
                                if (s6 !== peg$FAILED) {
                                  s7 = [];
                                  s8 = peg$parseschar();
                                  while (s8 !== peg$FAILED) {
                                    s7.push(s8);
                                    s8 = peg$parseschar();
                                  }
                                  if (s7 !== peg$FAILED) {
                                    s8 = peg$parsequotation_mark();
                                    if (s8 !== peg$FAILED) {
                                      s9 = peg$parse_();
                                      if (s9 !== peg$FAILED) {
                                        s10 = peg$parseRBRACE();
                                        if (s10 !== peg$FAILED) {
                                          s11 = peg$parse_();
                                          if (s11 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c35(s7);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parse_();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseLBRACE();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parse_();
                            if (s3 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 14) === peg$c36) {
                                s4 = peg$c36;
                                peg$currPos += 14;
                              } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c37);
                                }
                              }
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parse__();
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$parsequotation_mark();
                                  if (s6 !== peg$FAILED) {
                                    s7 = [];
                                    s8 = peg$parseschar();
                                    while (s8 !== peg$FAILED) {
                                      s7.push(s8);
                                      s8 = peg$parseschar();
                                    }
                                    if (s7 !== peg$FAILED) {
                                      s8 = peg$parsequotation_mark();
                                      if (s8 !== peg$FAILED) {
                                        s9 = peg$parse_();
                                        if (s9 !== peg$FAILED) {
                                          s10 = peg$parseRBRACE();
                                          if (s10 !== peg$FAILED) {
                                            s11 = peg$parse_();
                                            if (s11 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s1 = peg$c38(s7);
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parse_();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseLBRACE();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parse_();
                              if (s3 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 13) === peg$c39) {
                                  s4 = peg$c39;
                                  peg$currPos += 13;
                                } else {
                                  s4 = peg$FAILED;
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$c40);
                                  }
                                }
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parse__();
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parsequotation_mark();
                                    if (s6 !== peg$FAILED) {
                                      s7 = [];
                                      s8 = peg$parseschar();
                                      while (s8 !== peg$FAILED) {
                                        s7.push(s8);
                                        s8 = peg$parseschar();
                                      }
                                      if (s7 !== peg$FAILED) {
                                        s8 = peg$parsequotation_mark();
                                        if (s8 !== peg$FAILED) {
                                          s9 = peg$parse_();
                                          if (s9 !== peg$FAILED) {
                                            s10 = peg$parseRBRACE();
                                            if (s10 !== peg$FAILED) {
                                              s11 = peg$parse_();
                                              if (s11 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c41(s7);
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parse_();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseLBRACE();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parse_();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseWORD();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parse__();
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$parseVALUE();
                                      if (s6 !== peg$FAILED) {
                                        s7 = peg$parse_();
                                        if (s7 !== peg$FAILED) {
                                          s8 = peg$parseRBRACE();
                                          if (s8 !== peg$FAILED) {
                                            s9 = peg$parse_();
                                            if (s9 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s1 = peg$c42(s4, s6);
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }

          return s0;
        }

        function peg$parsechildnodes() {
          var s0, s1;

          s0 = [];
          s1 = peg$parsenodeItem();
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$parsenodeItem();
          }

          return s0;
        }

        function peg$parsenodeItem() {
          var s0, s1, s2, s3, s4, s5, s6, s7;

          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseLBRACE();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsenode();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseRBRACE();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c43(s4);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsenode() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseWORD();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseINTEGER();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseLBRACE();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseattributes();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parse_();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parseRBRACE();
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parse_();
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parseLBRACE();
                                if (s12 !== peg$FAILED) {
                                  s13 = peg$parse_();
                                  if (s13 !== peg$FAILED) {
                                    s14 = peg$parsechildnodes();
                                    if (s14 !== peg$FAILED) {
                                      s15 = peg$parse_();
                                      if (s15 !== peg$FAILED) {
                                        s16 = peg$parseRBRACE();
                                        if (s16 !== peg$FAILED) {
                                          s17 = peg$parse_();
                                          if (s17 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c44(s2, s4, s8, s14);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parse__() {
          var s0, s1;

          peg$silentFails++;
          s0 = [];
          if (peg$c46.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c47);
            }
          }
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              if (peg$c46.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c47);
                }
              }
            }
          } else {
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c45);
            }
          }

          return s0;
        }

        function peg$parse_() {
          var s0, s1;

          peg$silentFails++;
          s0 = [];
          if (peg$c46.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c47);
            }
          }
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$c46.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c47);
              }
            }
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c48);
            }
          }

          return s0;
        }

        function peg$parseMETA() {
          var s0;

          if (input.substr(peg$currPos, 4) === peg$c49) {
            s0 = peg$c49;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c50);
            }
          }

          return s0;
        }

        function peg$parseCONNECTION() {
          var s0;

          if (input.substr(peg$currPos, 10) === peg$c51) {
            s0 = peg$c51;
            peg$currPos += 10;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c52);
            }
          }

          return s0;
        }

        function peg$parseOM() {
          var s0;

          if (input.substr(peg$currPos, 2) === peg$c53) {
            s0 = peg$c53;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c54);
            }
          }

          return s0;
        }

        function peg$parseAN() {
          var s0;

          if (input.substr(peg$currPos, 2) === peg$c55) {
            s0 = peg$c55;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c56);
            }
          }

          return s0;
        }

        function peg$parseUN() {
          var s0;

          if (input.substr(peg$currPos, 2) === peg$c57) {
            s0 = peg$c57;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c58);
            }
          }

          return s0;
        }

        function peg$parseRN() {
          var s0;

          if (input.substr(peg$currPos, 2) === peg$c59) {
            s0 = peg$c59;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c60);
            }
          }

          return s0;
        }

        function peg$parseLBRACE() {
          var s0;

          if (input.charCodeAt(peg$currPos) === 123) {
            s0 = peg$c61;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c62);
            }
          }

          return s0;
        }

        function peg$parseRBRACE() {
          var s0;

          if (input.charCodeAt(peg$currPos) === 125) {
            s0 = peg$c63;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c64);
            }
          }

          return s0;
        }

        function peg$parseINTEGER() {
          var s0, s1, s2;

          s0 = peg$currPos;
          s1 = [];
          if (peg$c65.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c66);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c65.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c66);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c67(s1);
          }
          s0 = s1;

          return s0;
        }

        function peg$parseVALUE() {
          var s0, s1, s2, s3;

          s0 = peg$currPos;
          s1 = peg$parsequotation_mark();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseNUMBER();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsequotation_mark();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c68(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsequotation_mark();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseINT();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsequotation_mark();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c69(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsequotation_mark();
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseschar();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseschar();
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsequotation_mark();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c70(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }

          return s0;
        }

        function peg$parseINT() {
          var s0, s1, s2, s3, s4;

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 48) {
            s1 = peg$c71;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c72);
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c73();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c74;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c75);
              }
            }
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            if (s1 !== peg$FAILED) {
              if (peg$c76.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c77);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                if (peg$c65.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c66);
                  }
                }
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  if (peg$c65.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c66);
                    }
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c78(s1, s2, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }

          return s0;
        }

        function peg$parseNUMBER() {
          var s0, s1, s2, s3, s4, s5;

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c74;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c75);
            }
          }
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            if (peg$c65.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c66);
              }
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c65.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c66);
                }
              }
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c79;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c80);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                if (peg$c65.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c66);
                  }
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$c65.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c66);
                    }
                  }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c81(s1, s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseschar() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

          s0 = peg$currPos;
          s1 = peg$parseignored();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c82();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$parseunescaped();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseescape();
              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s2 = peg$c83;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c84);
                  }
                }
                if (s2 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 92) {
                    s2 = peg$c85;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c86);
                    }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 47) {
                      s2 = peg$c87;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c88);
                      }
                    }
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 98) {
                        s3 = peg$c89;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c90);
                        }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c91();
                      }
                      s2 = s3;
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 102) {
                          s3 = peg$c92;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c93);
                          }
                        }
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s2;
                          s3 = peg$c94();
                        }
                        s2 = s3;
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 110) {
                            s3 = peg$c95;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c96);
                            }
                          }
                          if (s3 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c97();
                          }
                          s2 = s3;
                          if (s2 === peg$FAILED) {
                            s2 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 117) {
                              s3 = peg$c98;
                              peg$currPos++;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c99);
                              }
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$currPos;
                              s5 = peg$currPos;
                              s6 = peg$parseHEXDIG();
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parseHEXDIG();
                                if (s7 !== peg$FAILED) {
                                  s8 = peg$parseHEXDIG();
                                  if (s8 !== peg$FAILED) {
                                    s9 = peg$parseHEXDIG();
                                    if (s9 !== peg$FAILED) {
                                      s6 = [s6, s7, s8, s9];
                                      s5 = s6;
                                    } else {
                                      peg$currPos = s5;
                                      s5 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                              if (s5 !== peg$FAILED) {
                                s4 = input.substring(s4, peg$currPos);
                              } else {
                                s4 = s5;
                              }
                              if (s4 !== peg$FAILED) {
                                peg$savedPos = s2;
                                s3 = peg$c100(s4);
                                s2 = s3;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c101(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }

          return s0;
        }

        function peg$parseescape() {
          var s0;

          if (input.charCodeAt(peg$currPos) === 92) {
            s0 = peg$c85;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c86);
            }
          }

          return s0;
        }

        function peg$parsequotation_mark() {
          var s0;

          if (input.charCodeAt(peg$currPos) === 34) {
            s0 = peg$c83;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c84);
            }
          }

          return s0;
        }

        function peg$parseunescaped() {
          var s0;

          if (peg$c102.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c103);
            }
          }

          return s0;
        }

        function peg$parseignored() {
          var s0;

          if (peg$c104.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c105);
            }
          }

          return s0;
        }

        function peg$parseDIGIT() {
          var s0;

          if (peg$c65.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c66);
            }
          }

          return s0;
        }

        function peg$parseHEXDIG() {
          var s0;

          if (peg$c106.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c107);
            }
          }

          return s0;
        }

        function peg$parseWORD() {
          var s0, s1, s2;

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseCHAR();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseCHAR();
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c108(s1);
          }
          s0 = s1;

          return s0;
        }

        function peg$parseCHAR() {
          var s0;

          if (peg$c109.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c110);
            }
          }
          if (s0 === peg$FAILED) {
            if (peg$c65.test(input.charAt(peg$currPos))) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c66);
              }
            }
          }

          return s0;
        }

        peg$result = peg$startRuleFunction();

        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail({
              type: "end",
              description: "end of input"
            });
          }

          throw peg$buildException(
            null,
            peg$maxFailExpected,
            peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
            peg$maxFailPos < input.length ?
            peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) :
            peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
          );
        }
      }

      return {
        SyntaxError: peg$SyntaxError,
        parse: peg$parse
      };
    })();
  });
// jshint ignore:end
